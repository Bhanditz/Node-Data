import {field, document} from '../../mongoose/decorators';
import { jsonignore } from '../decorators';
import {DynamicRepository} from './dynamic-repository';
import {Types} from 'mongoose';
import * as Enumerable from 'linq';
import {repoFromModel} from "./model-entity";
export class CrudEntity {
    @field({ primary: true, autogenerated: true })
    _id: Types.ObjectId;    

    
    public getRepository(): DynamicRepository{
        if (this.constructor && this.constructor.name) {
            return repoFromModel[this.constructor.name];
        }
        return undefined;
    }
    
    
    put(): Q.Promise<any>{
        if (!this.getRepository()) {
                return Q.when("repository not found")
            }
        return this.getRepository().put(this._id, this);
    }
    post(): Q.Promise<any>{
        if (!this.getRepository()) {
                return Q.when("repository not found")
            }
        return this.getRepository().post(this);
    }
    delete() {
        if (!this.getRepository()) {
            return Q.when("repository not found")
        }
        return this.getRepository().delete(this._id);
    }
    patch() {
        if (!this.getRepository()) {
            return Q.when("repository not found")
        }
        return this.getRepository().patch(this._id, this);
    }

}

export default CrudEntity;
